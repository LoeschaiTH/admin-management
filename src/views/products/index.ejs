<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <style>
      body {
        background-color: #f8f9fa;
      }
      .form-section {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
      .form-section h3 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #495057;
      }
      .form-label {
        font-weight: 500;
      }
      .card-title {
        font-size: 1.25rem;
        font-weight: 600;
      }
      .card-text img {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
        margin-top: 0.5rem;
      }
      footer {
        background-color: #343a40;
        color: #ffffff;
        padding: 1rem 0;
      }
      .modal-content {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }
      .modal-header {
        background-color: #f8d7da;
        color: #721c24;
      }
      .modal-footer .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
      }
      .modal-footer .btn-secondary {
        background-color: #6c757d;
      }
      
    </style>
  </head>
<body>
  <%- include('../partials/bootstrap') %>

  <div class="container my-5">
    <div class="text-center mb-5">
      <h1 class="display-4 text-primary">Product Management</h1>
      <p class="lead text-secondary">Manage your products efficiently with this simple interface.</p>
    </div>
  
    <!-- เพิ่ม row ใหม่ -->
    <div class="row">
      <!-- ฟอร์ม -->
      <div class="col-md-6">
        <form id="addProductForm" class="form-section p-4">
          <h3 class="text-center mb-4">Add New Product</h3>
          <div class="mb-3">
            <label for="name" class="form-label">Product Name:</label>
            <input type="text" id="name" name="name" class="form-control" required>
          </div>
          <div class="mb-3">
            <label for="price" class="form-label">Price (฿):</label>
            <input type="number" id="price" name="price" class="form-control" required>
          </div>
          <div class="mb-3">
            <label for="category" class="form-label">Category:</label>
            <input type="text" id="category" name="category" class="form-control" required>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description:</label>
            <textarea id="description" name="description" class="form-control" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="stock" class="form-label">Stock Quantity:</label>
            <input type="number" id="stock" name="stock" class="form-control" required>
          </div>
          <div class="mb-3">
            <label for="imageFile" class="form-label">Upload Image:</label>
            <input type="file" id="imageFile" name="imageFile" class="form-control" accept="image/*" required>
          </div>
          <button type="submit" class="btn btn-primary w-100">Add Product</button>
        </form>
      </div>
  
      <!-- รายการสินค้า -->
      <div class="col-md-6">
        <div id="productList" class="mt-3">
          <h2 class="text-center text-secondary mb-4">Product List</h2>
          <% products.forEach(function(product) { %>
            <div class="card mb-3 shadow-sm" id="product-<%= product._id %>">
              <div class="card-body">
                <h5 class="card-title"><%= product.productName %></h5>
                <p class="card-text">
                  <strong>Price:</strong> <%= product.price %> ฿<br>
                  <strong>Category:</strong> <%= product.category %><br>
                  <strong>Stock:</strong> <%= formatNumber(product.stock) %><br>
                  <img 
                  class="w-25 h-25 lazyload" 
                  data-src="<%= product.imageURL %>" 
                  src="/static/img-loading/lazy-circle.gif" 
                  alt="<%= product.productName %>">
                </p>
                <button class="btn btn-danger btn-sm" 
                  onclick="event.preventDefault(); showDeleteConfirmation({ id: '<%= product.id %>', pathStorage: '<%= product.pathStorage %>' });">
                  Delete
                </button>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="confirmDeleteLabel">Confirm Deletion</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete this product?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
  

    <footer class="text-center">
      <p class="mb-0">&copy; 2024 Admin Panel. All rights reserved.</p>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js" async></script>
    <script src="https://unpkg.com/@dotlottie/player-component@2.7.12/dist/dotlottie-player.mjs" type="module"></script>


  

  <script  type="module">
    import { storage, ref, getDownloadURL, uploadBytes, deleteObject } from '../plugins/firebase.js';  


    async function deleteImage(filePath) {
      const storageRef = ref(storage, filePath);  // Create a reference to the file in Firebase Storage
      try {
        await deleteObject(storageRef);  // Delete the file
        console.log("Image deleted successfully");
      } catch (error) {
        console.error("Error deleting image:", error);
      }
    }
    
    async function deleteProduct(product) {
      const productId = product.id;
      const filePath = product.pathStorage;
    
      if (filePath) {
        await deleteImage(filePath);  // Delete image if path exists
      }
    
      try {
        const response = await fetch(`/delete-product/${productId}`, { method: "POST" });
        const result = await response.json();
        if (result.success) {
          alert("Product deleted successfully!");
          document.getElementById(`product-${productId}`).remove();
        } else {
          alert(result.message || "Failed to delete product.");
        }
      } catch (error) {
        console.error("Error deleting product:", error);
        alert("An error occurred while deleting the product.");
      }
    }
    window.deleteProduct = deleteProduct;

    let productToDelete = null; 

    function showDeleteConfirmation(productId) {
      productToDelete = { id: productId.id, pathStorage: productId.pathStorage };
      const deleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
      deleteModal.show();
    }
    window.showDeleteConfirmation = showDeleteConfirmation;

    document.getElementById('confirmDeleteButton').addEventListener('click', async function () {
      if (!productToDelete) return;
      try {
        // เรียกใช้ฟังก์ชัน deleteProduct
        await deleteProduct(productToDelete);
    
        // ซ่อน Modal หลังลบเสร็จ
        const deleteModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal'));
        deleteModal.hide();
    
        // แสดงข้อความสำเร็จ (ถ้าจำเป็น)
        alert('Product deleted successfully!');
      } catch (error) {
        console.error('Error deleting product:', error);
        alert('An error occurred while deleting the product.');
      } finally {
        productToDelete = null; // รีเซ็ตข้อมูลสินค้า
      }
    });
    

    async function uploadImage(file) {
      if (!file) {
        alert("Please select an image file.");
        return null;
      }

      const storageRef = ref(storage, `product-images/${file.name}`);
      const pathStorage = `product-images/${file.name}`;
      const fileName = file.name;
      try {
        const snapshot = await uploadBytes(storageRef, file);
        const downloadURL = await getDownloadURL(snapshot.ref);
        return { pathStorage, downloadURL, fileName };
      } catch (error) {
        console.error("Error uploading image:", error);
        alert("An error occurred during image upload.");
        return null;
      }
    }

   


    async function addProduct(event) {
      event.preventDefault();

      const productName = document.getElementById("name").value.trim();
      const price = parseFloat(document.getElementById("price").value.trim());
      const category = document.getElementById("category").value.trim();
      const description = document.getElementById("description").value.trim();
      const stock = parseInt(document.getElementById("stock").value.trim(), 10);
      const imageFile = document.getElementById("imageFile").files[0];

      if (!productName || isNaN(price) || !category || isNaN(stock)) {
        alert("Please fill out all required fields.");
        return;
      }

      const imgDetail = await uploadImage(imageFile);
      const imageURL = imgDetail.downloadURL;
      const fileName = imgDetail.fileName;
      const pathStorage = imgDetail.pathStorage;
      if (!imageURL) return;

      const productData = {
        productName,
        price,
        category,
        description,
        stock,
        imageURL,
        fileName,
        pathStorage
      };

      try {
        const response = await fetch("/add-product", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(productData)
        });

        const result = await response.json();
        if (result.success) {
          alert("Product added successfully!");
          document.getElementById("addProductForm").reset();
          updateProductList(result.product);
          window.location.reload();
        } else {
          alert(result.message || "Failed to add product.");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while adding the product.");
      }
    }

    // ฟังก์ชันอัพเดตรายการสินค้าใน DOM
    function updateProductList(product) {
      const productList = document.getElementById("productList");
      const productItem = document.createElement("div");
      productItem.className = "card mb-3 shadow-sm";
      productItem.id = `product-${product._id}`;

      productItem.innerHTML = `
        <div class="card-body">
          <h5 class="card-title">${product.productName}</h5>
          <p class="card-text">
            Price: ${product.price} ฿<br>
            Category: ${product.category}<br>
            Stock: ${product.stock}<br>
            <img src="${product.imageURL}" alt="${product.productName}" class="img-fluid mt-2 w-25 h-25">
          </p>
          <button class="btn btn-danger btn-sm" onclick="deleteProduct('${product._id}', '${product.pathStorage}')">Delete</button>
        </div>
      `;
      productList.appendChild(productItem);
    }

    document.getElementById("addProductForm").addEventListener("submit", addProduct);

  </script>
  
</body>
</html>
